// Generated by CoffeeScript 1.3.3
(function() {
  var Admittance, AdmittanceModule, FileAdaptor, am, chai, fs;

  chai = require('chai');

  chai.should();

  AdmittanceModule = require('../index');

  Admittance = AdmittanceModule.Admittance;

  FileAdaptor = AdmittanceModule.FileAdaptor;

  fs = require('fs');

  am = new Admittance(new FileAdaptor('tests/rights.json'));

  describe('The Admittance class', function() {
    afterEach(function(done) {
      am.clearAll();
      return done();
    });
    describe('createAuthItem method', function() {
      return it('should add an item to the auth collection', function() {
        am.createAuthItem('admin', 2, 'Admin user', '', 'N;');
        return am.getAuthItem('admin').name.should.equal('admin');
      });
    });
    describe('assign method', function() {
      return it('should assign an item to a user id', function() {
        am.checkAccess('admin', 1).should.equal(false);
        am.createAuthItem('admin', 2, 'Admin user', '', 'N;');
        am.assign('admin', 1, '', 'N;');
        return am.checkAccess('admin', 1).should.equal(true);
      });
    });
    describe('addItemChild method', function() {
      return it('should add an item child to an item', function() {
        am.checkAccess('admin', 1).should.equal(false);
        am.checkAccess('retard', 1).should.equal(false);
        am.createAuthItem('admin', 2, 'Admin user', '', 'N;');
        am.createAuthItem('retard', 2, 'Retarded user', '', 'N;');
        am.addItemChild('admin', 'retard');
        am.assign('admin', 1, '', 'N;');
        am.checkAccess('admin', 1).should.equal(true);
        return am.checkAccess('retard', 1).should.equal(true);
      });
    });
    describe('hasItemChild method', function() {
      return it('should return true if item has a child', function() {
        am.hasItemChild('admin', 'retard').should.equal(false);
        am.createAuthItem('admin', 2, 'Admin user', '', 'N;');
        am.createAuthItem('retard', 2, 'Retarded user', '', 'N;');
        am.addItemChild('admin', 'retard');
        return am.hasItemChild('admin', 'retard').should.equal(true);
      });
    });
    describe('isAssigned method', function() {
      return it('should return true if user has a given item assigned', function() {
        am.isAssigned('admin', 1).should.equal(false);
        am.createAuthItem('admin', 2, 'Admin user', '', 'N;');
        am.assign('admin', 1, '', 'N;');
        return am.isAssigned('admin', 1).should.equal(true);
      });
    });
    describe('getAuthAssignment method', function() {
      return it('should return auth assignment for a given user by itemname', function() {
        am.createAuthItem('admin', 2, 'Admin user', '', 'N;');
        am.assign('admin', 1, '', 'N;');
        return am.getAuthAssignment('admin', 1).itemName.should.equal('admin');
      });
    });
    describe('getAuthAssignments method', function() {
      return it('should return auth assignments for a given user', function() {
        am.createAuthItem('admin', 2, 'Admin user', '', 'N;');
        am.createAuthItem('monkey', 2, 'Admin user', '', 'N;');
        am.assign('admin', 1, '', 'N;');
        am.assign('monkey', 1, '', 'N;');
        am.getAuthAssignments(1).should.be.an('object');
        am.getAuthAssignments(1)['admin']['itemName'].should.equal('admin');
        return am.getAuthAssignments(1)['monkey']['itemName'].should.equal('monkey');
      });
    });
    describe('getAuthItem method', function() {
      return it('should return auth item for a given auth item name', function() {
        am.createAuthItem('admin', 2, 'Admin user', '', 'N;');
        am.getAuthItem('admin').should.be.an('object');
        return am.getAuthItem('admin').name.should.equal('admin');
      });
    });
    return describe('clearAll method', function() {
      return it('should clear all items from memory', function() {});
    });
  });

  /*
      FileAdaptor Tests
  */


  describe('The FileAdaptor class', function() {
    beforeEach(function(done) {
      am = new Admittance(new FileAdaptor('tests/rights.json'));
      return done();
    });
    afterEach(function(done) {
      am.clearAll();
      fs.readFile('tests/rights-src.json', 'utf8', function(err, data) {
        return fs.writeFile('tests/rights.json', data, function() {});
      });
      return done();
    });
    describe('load method', function() {
      return it('should load existing rights file', function(done) {
        return am.on('load', function() {
          am.getAuthItem('admin').should.be.an('object');
          am.getAuthItem('admin').name.should.equal('admin');
          return done();
        });
      });
    });
    return describe('save method', function() {
      return it('should save rights to file', function(done) {
        return am.on('load', function() {
          am.createAuthItem('my-test', 2, 'this is a test');
          return am.save(function() {
            var aam;
            aam = new Admittance(new FileAdaptor('tests/rights.json'));
            aam.getAuthItem('my-test').should.be.an('object');
            return done();
          });
        });
      });
    });
  });

}).call(this);
